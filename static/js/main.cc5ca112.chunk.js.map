{"version":3,"sources":["serviceWorker.js","index.js","App.js","logo.svg"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","PhonePe","loggingEnabled","props","state","grantToken","build","Constants","Species","web","sdk","fetchAuthToken","res","setState","log","JSON","stringify","alert","encodedString","Buffer","toString","hashDigest","sha256","err","base64String","className","src","logo","alt","href","target","rel","Component","module","exports"],"mappings":"sRAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,oMEhI5BC,IAAQA,QAAQC,gBAAiB,E,IAEZd,E,kDACnB,WAAYe,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,WAAY,IAHG,E,gEAOE,IAAD,OACdA,EAAa,GACjBJ,IAAQA,QAAQA,QAAQK,MAAML,IAAQA,QAAQM,UAAUC,QAAQC,KAAKf,MACnE,SAAAgB,GACEA,EACGC,iBACAjB,MAAK,SAAAkB,GACJ,EAAKC,SAAS,CAAER,WAAYO,EAAIP,aAChCA,EAAaO,EAAIP,WACjBN,QAAQe,IAAI,+BAAiCC,KAAKC,UAAUJ,IAC5DK,MAAML,GAINb,QAAQe,IAAIT,EAAY,cACxB,IAAMa,EAAgB,IAAIC,EAAO,CAC/Bd,WAAYA,IACXe,SAAS,UACZrB,QAAQe,IAAII,EAAe,gBAC3B,IAAMG,EAAaC,iBAAOJ,EARb,+DASbnB,QAAQe,IAAIO,EAAY,iBAEzBxB,OAAM,SAAA0B,GACLxB,QAAQe,IACN,kDAAoDS,GAEtDN,MAAMM,W,iCAOd,IAIMF,EAAaC,iBAAOE,uFAC1BzB,QAAQe,IAAIO,EAAY,gB,+BAIxB,OACE,yBAAKI,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,qB,GAzDuBC,e,2CCXjCC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.cc5ca112.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from \"react\";\nimport PhonePe from \"phonepesdk-web\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport { sha256 } from \"js-sha256\";\nimport hmacSHA512 from \"crypto-js/hmac-sha512\";\nimport Base64 from \"crypto-js/enc-base64\";\n\nPhonePe.PhonePe.loggingEnabled = true;\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grantToken: \"\"\n    };\n  }\n\n  componentDidMount() {\n    let grantToken = \"\";\n    PhonePe.PhonePe.PhonePe.build(PhonePe.PhonePe.Constants.Species.web).then(\n      sdk => {\n        sdk\n          .fetchAuthToken()\n          .then(res => {\n            this.setState({ grantToken: res.grantToken });\n            grantToken = res.grantToken;\n            console.log(\"Grant token data received = \" + JSON.stringify(res));\n            alert(res);\n            const path = \"/v3/service/auth/access\";\n            const salt = \"41941159-fd68-4dee-b11e-ac2d0783b2b1\";\n            const saltIndex = 1;\n            console.log(grantToken, \"grantToken\");\n            const encodedString = new Buffer({\n              grantToken: grantToken\n            }).toString(\"base64\");\n            console.log(encodedString, \"base64String\");\n            const hashDigest = sha256(encodedString + path + salt);\n            console.log(hashDigest, \"hashDigest\");\n          })\n          .catch(err => {\n            console.log(\n              \"Error occurred while fetching the grant token: \" + err\n            );\n            alert(err);\n          });\n      }\n    );\n  }\n\n  doAction() {\n    const base64String = \"YERACiNupdd/9GmmAvcq0A==\";\n    const path = \"/v3/service/auth/access\";\n    const salt = \"41941159-fd68-4dee-b11e-ac2d0783b2b1\";\n    const saltIndex = 1;\n    const hashDigest = sha256(base64String + path + salt);\n    console.log(hashDigest, \"hashDigest\");\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\n// PhonePe.PhonePe.loggingEnabled = true;\n\n// async function App() {\n//   let sdk = await PhonePe.PhonePe.build(PhonePe.Constants.Species.web);\n//   // sdk\n//   //   .fetchAuthToken()\n//   //   .then(res => {\n//   //     console.log(\"Grant token data received = \" + res);\n//   //     alert(res);\n//   //   })\n//   //   .catch(err => {\n//   //     console.log(\"Error occurred while fetching the grant token: \" + err);\n//   //     alert(err);\n//   //   });\n\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}